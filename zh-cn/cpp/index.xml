<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cpps on Max Qian's blog</title><link>/zh-cn/cpp/</link><description>Recent content in Cpps on Max Qian's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>©2024 Max Qian</copyright><atom:link href="/zh-cn/cpp/index.xml" rel="self" type="application/rss+xml"/><item><title>临时释放锁：Antilock 模式 (RRII)</title><link>/zh-cn/cpp/rrii/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh-cn/cpp/rrii/</guid><description>&lt;h2 class="relative group">前言
&lt;div id="%E5%89%8D%E8%A8%80" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#%E5%89%8D%E8%A8%80" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>在多线程编程中，正确管理线程同步是确保程序稳定性和性能的关键。C++ 提供了多种工具来帮助开发者实现线程同步，例如 &lt;code>std::mutex&lt;/code>、&lt;code>std::lock_guard&lt;/code> 和 &lt;code>std::unique_lock&lt;/code> 等。这些工具虽然强大，但在某些复杂场景下，可能需要更灵活的锁管理方式。比如说有的时候我在加锁后，在局部代码中需要释放锁，然后后续运行又需要加锁，这个时候我们虽然可以通过&lt;code>unlock&lt;/code>和&lt;code>lock&lt;/code>组合完成，但是代码变长后难免会出现遗忘的情况，从而产生错误。那么，本文将介绍一种名为“Antilock”的模式，它能够在需要时暂时释放锁，并在操作完成后自动重新获取锁，从而避免潜在的死锁和遗忘问题。&lt;/p></description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="/zh-cn/cpp/rrii/featured.png"/></item></channel></rss>