<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Max Qian's blog</title><link>/zh-cn/</link><description>Recent content on Max Qian's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>©2024 Max Qian</copyright><atom:link href="/zh-cn/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>/zh-cn/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh-cn/about/</guid><description>&lt;h1 class="relative group">🙋‍♂️ Hi there
&lt;div id="-hi-there" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#-hi-there" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h1>
&lt;!-- my-icons -->
&lt;p align="center">
&lt;a href="https://github.com/AstroAir">&lt;img src="https://img.shields.io/badge/status-updating-brightgreen.svg">&lt;/a>
&lt;img src="https://visitor-badge.laobi.icu/badge?page_id=AstroAir.AstroAir" alt="visitors"/>
&lt;/p>
&lt;!-- my-ticker -->
&lt;p>&lt;a href="https://git.io/typing-svg" target="_blank">
&lt;figure>
&lt;img class="my-0 rounded-md" loading="lazy" src="https://readme-typing-svg.herokuapp.com?color=%2336BCF7&amp;amp;center=true&amp;amp;vCenter=true&amp;amp;width=600&amp;amp;lines=Hi&amp;#43;there&amp;#43;%f0%9f%91%8b,&amp;#43;I&amp;#43;am&amp;#43;Max&amp;#43;Qian;&amp;#43;Welcome&amp;#43;to&amp;#43;My&amp;#43;Profile!" alt="Typing SVG" />
&lt;/figure>
&lt;/a>&lt;/p>
&lt;p>I&amp;rsquo;m Max Qian. I have a passion for astronomy and programming, and am committed to developing open-source astronomical software.&lt;/p></description></item><item><title>Day1 - "Hello, World!"原来也这么复杂</title><link>/zh-cn/c/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh-cn/c/01/</guid><description>&lt;p>大家好啊，欢迎来到 C 语言的世界！作为一个入门者，你即将踏上一段有趣的编程旅程。而我们要做的第一件事，就是写出一个无比经典且简单的程序——&amp;ldquo;Hello, World!&amp;quot;。准备好了吗？带上你的大脑和电脑（如果是手机超人也可以），我们要出发咯！&lt;/p></description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="/zh-cn/c/01/featured.png"/></item><item><title>Day1 - Rust 安装与入门指南</title><link>/zh-cn/rust/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh-cn/rust/01/</guid><description>&lt;h2 class="relative group">安装 Rust
&lt;div id="%E5%AE%89%E8%A3%85-rust" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#%E5%AE%89%E8%A3%85-rust" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>第一步是安装 Rust。我们将通过 &lt;code>rustup&lt;/code> 下载 Rust，这是一个用于管理 Rust 版本及相关工具的命令行工具。你需要联网才能下载。&lt;/p></description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="/zh-cn/rust/01/featured.png"/></item><item><title>Day10 - 宏</title><link>/zh-cn/c/10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh-cn/c/10/</guid><description>&lt;p>在 C 语言中，宏系统是一个强大且灵活的工具，它通过预处理器在编译之前对代码进行文本替换。宏的使用可以简化代码、提高效率，但也可能带来一些潜在问题，如调试困难和可读性下降。本文将带你深入了解 C 语言宏系统的各个方面，并通过丰富的示例展示其用法和应用场景。&lt;/p></description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="/zh-cn/c/10/featured.png"/></item><item><title>Day11 - 随机数</title><link>/zh-cn/c/11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh-cn/c/11/</guid><description>&lt;p>在 C 语言中，生成随机数的功能主要通过标准库提供的两个函数来实现：&lt;code>rand()&lt;/code> 和 &lt;code>srand()&lt;/code>。它们分别用于生成随机数和设置随机数的种子。&lt;/p></description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="/zh-cn/c/11/featured.png"/></item><item><title>Day2 - 不一样的选择却殊途同归</title><link>/zh-cn/c/02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh-cn/c/02/</guid><description>&lt;p>分支语句在 C 语言中就像是程序的导航系统，告诉代码在不同的条件下该去哪里。这些语句帮助你的程序在不同的情况下选择不同的路线，就像你开车时选择不同的道路以避开交通堵塞。通过这些分支，程序能根据不同的输入或状态选择最合适的代码块，从而提升其灵活性和适应性。&lt;/p></description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="/zh-cn/c/02/featured.png"/></item><item><title>Day3 - 重复的事情说一次就够了</title><link>/zh-cn/c/03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh-cn/c/03/</guid><description>&lt;p>今天的内容将为你提供一个清晰的起点，帮助你掌握循环语句这一编程中的重要概念。循环语句让我们能够高效地重复执行任务，这不仅是编程的基本能力之一，更是编写灵活、动态程序的关键。
准备好了吗？让我们一起进入 C 语言的世界，揭开循环语句的神秘面纱，开始这场充满逻辑与创造力的冒险吧！&lt;strong>C 语言，启动！&lt;/strong>&lt;/p></description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="/zh-cn/c/03/featured.png"/></item><item><title>Day4 - 你是个什么东西</title><link>/zh-cn/c/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh-cn/c/04/</guid><description>&lt;h2 class="relative group">引入
&lt;div id="%E5%BC%95%E5%85%A5" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#%E5%BC%95%E5%85%A5" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>学习 C 语言时，理解类型系统和类型转换是非常重要的。它们帮助你掌握如何存储和操作不同类型的数据。在接下来的讲解中，我会以简单生动的方式带你一探 C 语言类型系统的奥秘，并通过示例加深理解。&lt;/p></description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="/zh-cn/c/04/featured.png"/></item><item><title>Day5 - 标准输入</title><link>/zh-cn/c/05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh-cn/c/05/</guid><description>&lt;h2 class="relative group">引入
&lt;div id="%E5%BC%95%E5%85%A5" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#%E5%BC%95%E5%85%A5" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>在 C 语言中，输入是从用户或文件等外部源获取数据并存储到程序变量中的过程。C 语言提供了多种方式来获取输入数据，包括标准输入函数、文件输入函数以及低级别的系统输入函数。&lt;/p></description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="/zh-cn/c/05/featured.png"/></item><item><title>Day6 - 函数那些事</title><link>/zh-cn/c/06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh-cn/c/06/</guid><description>&lt;p>众所周知，如果把所有代码都写在 main 函数里不可取的（如果你是&lt;code>oier&lt;/code>我没有意见），所以我们需要将代码分割成多个函数，这样可以有效提高代码的可读性和可维护性。&lt;/p></description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="/zh-cn/c/06/featured.png"/></item><item><title>Day7 - 结构体</title><link>/zh-cn/c/07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh-cn/c/07/</guid><description>&lt;p>结构体（struct）是 C 语言中用来聚合不同类型数据的工具，它允许用户定义自己的复合数据类型。结构体可以用于存储和管理数据，提高程序的可读性和维护性。&lt;/p></description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="/zh-cn/c/07/featured.png"/></item><item><title>Day8 - 链表</title><link>/zh-cn/c/08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh-cn/c/08/</guid><description>&lt;p>链表（Linked List）是 C 语言中一种常见的数据结构，属于线性数据结构。它不同于数组，链表的长度可以动态变化，适合需要频繁插入、删除元素的场景，当然，也是大学 c 语言考试中不可缺少的一部分。下面将详细介绍链表的原理、类型、实现方式、应用及其优缺点。&lt;/p></description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="/zh-cn/c/08/featured.png"/></item><item><title>Day9 - 文件操作</title><link>/zh-cn/c/09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh-cn/c/09/</guid><description>&lt;p>文件操作是 C 语言中的一项重要功能，用于实现对磁盘文件的读写、创建、修改等操作。C 语言通过标准库函数提供了强大的文件操作支持，这些函数位于头文件 &lt;code>&amp;lt;stdio.h&amp;gt;&lt;/code> 中。&lt;/p></description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="/zh-cn/c/09/featured.png"/></item><item><title>临时释放锁：Antilock 模式 (RRII)</title><link>/zh-cn/cpp/rrii/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/zh-cn/cpp/rrii/</guid><description>&lt;h2 class="relative group">前言
&lt;div id="%E5%89%8D%E8%A8%80" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#%E5%89%8D%E8%A8%80" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>在多线程编程中，正确管理线程同步是确保程序稳定性和性能的关键。C++ 提供了多种工具来帮助开发者实现线程同步，例如 &lt;code>std::mutex&lt;/code>、&lt;code>std::lock_guard&lt;/code> 和 &lt;code>std::unique_lock&lt;/code> 等。这些工具虽然强大，但在某些复杂场景下，可能需要更灵活的锁管理方式。比如说有的时候我在加锁后，在局部代码中需要释放锁，然后后续运行又需要加锁，这个时候我们虽然可以通过&lt;code>unlock&lt;/code>和&lt;code>lock&lt;/code>组合完成，但是代码变长后难免会出现遗忘的情况，从而产生错误。那么，本文将介绍一种名为“Antilock”的模式，它能够在需要时暂时释放锁，并在操作完成后自动重新获取锁，从而避免潜在的死锁和遗忘问题。&lt;/p></description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="/zh-cn/cpp/rrii/featured.png"/></item></channel></rss>